*tinycpp.txt*         Plugin for not much (hence tiny) C++ stuff           *tinycpp*

                                 TinyC++ Manual

Author: David Schatz
License: MIT License


================================================================================
CONTENTS                                                          *TinyCppContent*

    1. About ................ |TinyCppAbout|
    2. Usage ................ |TinyCppUsage|
    3. Credits .............. |TinyCppCredits|


================================================================================
Section 1: About                                                    *TinyCppAbout*

I wrote this plugin to support (me) with some common tasks during C++ development.
Some of the functionalities may actually be provided by some other plugins as well.

More info on github: https://github.com/wyv3rn/vim-tinycpp


================================================================================
Section 2: Usage                                                    *TinyCppUsage*

TinyC++ is used by invoking commands that are prefixed with "Tc". It's up to the
user to map them if so desired.

Currently supported commands (and thus overall features) are:

--------------------------------------------------------------------------------
:TcIncGuard                                                           *TcIncGuard*
Inserts an include guard (#ifndef) for the current buffer in new lines at the
current cursor position (or below if the line is not empty). The name of the
guard is constructed as in the following examples:
    Test.hpp    -> TEST_HPP
    TestCamel.h -> TESTCAMEL_H

--------------------------------------------------------------------------------
:TcSwitchHS                                                           *TcSwitchHS*
Switches between header and source file. Note that this simply works based on
filenames, i.e. name of header and source file must match and be in the same
directory. If the file to switch to does not exists in the directory, a new file
will be opened instead (using '.cpp' and '.hpp' extensions).

Example:
    Invoking in Test.hpp will switch to Test.cpp or Test.cc
    Invoking in Test.cpp will switch to Test.hpp or Test.h

--------------------------------------------------------------------------------
:TcCreateDef                                                         *TcCreateDef*
Creates the definition for the function/method in the current line and inserts
it at the end of the source file. Only works if the definition is a one-liner.

Example:
    Invoking on line "virtual void fun(int a) const override;" in class Test
    (in Test.hpp) will create the following line at the end of Test.cpp:
    "void Test::fun(int a) {}", with the cursor at the end of the new line.

--------------------------------------------------------------------------------
:TcMoveDef                                                             *TcMoveDef*
If cursor placed on the signature line (one-liner) of a combined declaration/
definition, the command will cut the implementation block, insert the definition
in the source file like :TcCreateDef and paste the implemantation.

Example:
    Invoking on line "virtual void fun(int a) const override {}" in class Test
    (in Test.hpp) will create the following line at the end of Test.cpp:
    "void Test::fun(int a) {}", and at the same time delete the '{}' from
    Test.h

================================================================================
Section 3: Credits                                                *TinyCppCredits*

Thanks to Tim Candid for his short but very helpful tutorial on writing a simple
vim plugin based on python:
http://candidtim.github.io/vim/2017/08/11/write-vim-plugin-in-python.html

Thanks to Steve Losh for his book "Learn Vimscript the hard way", which among
other useful information suggests to include a credits section in this file :)
http://learnvimscriptthehardway.stevelosh.com
